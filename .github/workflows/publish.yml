name: Deploy Dendron with GitHub Pages

on:
  workflow_dispatch:
  push:
    branches:
    - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Restore Node modules cache
      uses: actions/cache@v3
      id: node-modules-cache
      with:
        path: |
          node_modules
          .next/*
          !.next/.next/cache
          !.next/.env.*
        key: ${{ runner.os }}-dendronv2-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}-4

    - name: Contents of next
      run: "(test -d .next) && ls .next || echo 'no next file'"

    - name: Install dependencies
      run: npm install

    - name: Initialize or pull nextjs template
      run: "(test -d .next) && (echo 'updating dendron next...' && cd .next && git reset --hard && git pull && yarn && cd ..) || (echo 'init dendron next' && yarn dendron publish init)"

    - name: Contents of next
      run: "(test -d .next) && ls .next || echo 'no next file'"

    - name: Restore Next cache
      uses: actions/cache@v3
      with:
        path: .next/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('.next/yarn.lock', '.next/package-lock.json') }}-${{ hashFiles('.next/**.[jt]s', '.next/**.[jt]sx') }}-1

    - name: Export notes
      run: yarn dendron publish export --target github --yes

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
